
import os


def get_tokens():
    tokens_filename = "/home/wangdq/data/tokens.txt"
    with open(tokens_filename) as f:
        tokens = [t.strip() for t in f.readlines()]
    return tokens

def split_by_tokens():
    src_filename = "/home/wangdq/data/all.en"
    tgt_filename = "/home/wangdq/data/all.zh"
    src_lang, tgt_lang = 'en', 'zh'
    tokens = get_tokens()

    tokens_dict = {t:[[], []] for t in tokens}
    with open(src_filename) as f_src, open(tgt_filename) as f_tgt:
        for src, tgt in zip(f_src, f_tgt):
            src_tokens = set(src.strip().split(' '))
            for t in tokens:
                if t in src_tokens:
                    tokens_dict[t][0].append(src)
                    tokens_dict[t][1].append(tgt)

    dirname = "/home/wangdq/data/token_dataset"
    for tokens, (src, tgt) in tokens_dict.items():
        with open(os.path.join(dirname, tokens + '.' + src_lang), 'w') as f:
            f.writelines(src)
        with open(os.path.join(dirname, tokens + '.' + tgt_lang), 'w') as f:
            f.writelines(tgt)
        with open(os.path.join(dirname, tokens + '.txt'), 'w') as f:
            for s, t in zip(src, tgt):
                f.write(s.strip() + '\t' + t)

"""
test index:
{}
"""
import random

def get_token_sentence_mapping(tokens, exclude_indexs=set()):
    src_filename = "/home/wangdq/data/all.en"
    tgt_filename = "/home/wangdq/data/all.zh"
    tokens_sentence_mapping = {t: [] for t in tokens}
    sentence_token_mapping = {}
    sentences = {}
    with open(src_filename) as f_src, open(tgt_filename) as f_tgt:
        for index, (src, tgt) in enumerate(zip(f_src, f_tgt)):
            if index in exclude_indexs:
                continue
            src_tokens = set(src.strip().split(' '))
            sentences[index] = (src, tgt)
            sentence_token_mapping[index] = []
            for t in tokens:
                if t in src_tokens:
                    tokens_sentence_mapping[t].append(index)
                    sentence_token_mapping[index].append(t)

    return tokens_sentence_mapping, sentence_token_mapping, sentences




def write_file(dirname, hint, _set, tokens, sentences, sentence_token_mapping):
    txt_filename = os.path.join(dirname, hint + '.txt')
    src_filename = os.path.join(dirname, hint + '.en')
    tgt_filename = os.path.join(dirname, hint + '.zh')

    temp_content = set()
    with open(txt_filename, 'w') as f_txt, open(src_filename, 'w') as f_src, open(tgt_filename, 'w') as f_tgt:
        for t in tokens:
            for index in _set[t]:
                if index in temp_content:
                    continue
                temp_content.add(index)
                token_set = '\t'.join(sentence_token_mapping[index])

                f_txt.write(token_set + '\t' + sentences[index][0].strip() + '\t' + sentences[index][1].strip() + '\n')
                f_src.write(sentences[index][0].strip() + '\n')
                f_tgt.write(sentences[index][1].strip() + '\n')


def filter_tokens():
    tokens = get_tokens()
    tokens_sentence_mapping, sentence_token_mapping, sentences = get_token_sentence_mapping(tokens)
    new_tokens = []
    for token, sentences in tokens_sentence_mapping.items():
        if len(sentences) >= 30:
            new_tokens.append(token)
    tokens_filename = "/home/wangdq/data/tokens.txt"
    with open(tokens_filename, 'w') as f:
        for token in new_tokens:
            f.write(token + '\n')





def split_dataset(test_num=10, train_num='all'):
    tokens = get_tokens()
    tokens_sentence_mapping, sentence_token_mapping, sentences = get_token_sentence_mapping(tokens)

    test_mapping = {}
    test_sentences = set()
    for t in tokens:
        num, i = 0, 0
        test_mapping[t] = []
        random.shuffle(tokens_sentence_mapping[t])
        for i in range(len(tokens_sentence_mapping[t])):
            if num >= test_num:
                break
            index = tokens_sentence_mapping[t][i]
            if len(sentence_token_mapping[index]) == 1:
                test_mapping[t].append(index)
                num += 1
                test_sentences.add(index)
        if num != test_num:
            print("error!")
            assert True, "???"


    dirname = "/home/wangdq/data/dataset"

    import pickle
    pickle.dump(test_sentences, open(os.path.join(dirname, 'test.index'), 'wb'))

    write_file(dirname, "test", test_mapping, tokens, sentences, sentence_token_mapping)

    train_mapping = {}
    for t, index_list in tokens_sentence_mapping.items():
        new_index_list = [index for index in index_list if index not in test_sentences]
        new_index_list.sort()
        train_mapping[t] = new_index_list
    write_file(dirname, "train", train_mapping, tokens, sentences, sentence_token_mapping)



def construct_train(train_num=20):
    dirname = "/home/wangdq/data/dataset"
    import pickle
    test_index = pickle.load(open(os.path.join(dirname, 'test.index'), 'rb'))

    tokens = get_tokens()
    tokens_sentence_mapping, sentence_token_mapping, sentences = get_token_sentence_mapping(tokens, test_index)


    train_mapping = {}
    for t, index_list in tokens_sentence_mapping.items():
        if train_num != 'all':
            if len(index_list) < int(train_num):
                print("???")
            index_list = random.sample(index_list, int(train_num))
        index_list.sort()
        train_mapping[t] = index_list

    dirname = os.path.join(dirname, str(train_num))
    os.mkdir(dirname)
    write_file(dirname, "train", train_mapping, tokens, sentences, sentence_token_mapping)


# filter_tokens()

# split_dataset()

construct_train(train_num=5)
construct_train(train_num=10)
construct_train(train_num=15)
construct_train(train_num=20)
construct_train(train_num='all')


"""

/home/data_ti5_c/wangdq/code/fastBPE/fast applybpe train.bpe.en train.en /home/wangdq/cwmt/codes.en
/home/data_ti5_c/wangdq/code/fastBPE/fast applybpe train.bpe.zh train.zh /home/wangdq/cwmt/codes.zh
/home/data_ti5_c/wangdq/code/fastBPE/fast applybpe test.bpe.en test.en /home/wangdq/cwmt/codes.en
/home/data_ti5_c/wangdq/code/fastBPE/fast applybpe test.bpe.zh test.zh /home/wangdq/cwmt/codes.zh

fairseq-preprocess --source-lang en --target-lang zh \
    --trainpref train.bpe  --testpref test.bpe \
    --srcdict /home/data_ti5_c/wangdq/data/few_shot/pretrain/data-bin/dict.en.txt \
    --tgtdict /home/data_ti5_c/wangdq/data/few_shot/pretrain/data-bin/dict.zh.txt \
    --destdir data-bin \
    --workers 10
    
    
fairseq-preprocess --source-lang en --target-lang zh \
    --trainpref train.bpe  --testpref newstest2017.bpe --validpref newsdev2017.bpe \
    --srcdict /home/data_ti5_c/wangdq/data/few_shot/pretrain/data-bin/dict.en.txt \
    --tgtdict /home/data_ti5_c/wangdq/data/few_shot/pretrain/data-bin/dict.zh.txt \
    --destdir data-bin \
    --workers 10
 """